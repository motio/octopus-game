var k=Object.defineProperty,w=Object.defineProperties;var U=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var _=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable;var F=(s,t,e)=>t in s?k(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e,o=(s,t)=>{for(var e in t||(t={}))_.call(t,e)&&F(s,e,t[e]);if(r)for(var e of r(t))y.call(t,e)&&F(s,e,t[e]);return s},n=(s,t)=>w(s,U(t));var T=(s,t)=>{var e={};for(var i in s)_.call(s,i)&&t.indexOf(i)<0&&(e[i]=s[i]);if(s!=null&&r)for(var i of r(s))t.indexOf(i)<0&&y.call(s,i)&&(e[i]=s[i]);return e};import{S as v,G as O,a as R}from"./index-D0w83_4I.js";const B={normal:0,add:1,multiply:2,screen:3,overlay:4,erase:5,"normal-npm":6,"add-npm":7,"screen-npm":8,min:9,max:10},l=0,d=1,u=2,h=3,c=4,f=5,g=class S{constructor(){this.data=0,this.blendMode="normal",this.polygonOffset=0,this.blend=!0,this.depthMask=!0}get blend(){return!!(this.data&1<<l)}set blend(t){!!(this.data&1<<l)!==t&&(this.data^=1<<l)}get offsets(){return!!(this.data&1<<d)}set offsets(t){!!(this.data&1<<d)!==t&&(this.data^=1<<d)}set cullMode(t){if(t==="none"){this.culling=!1;return}this.culling=!0,this.clockwiseFrontFace=t==="front"}get cullMode(){return this.culling?this.clockwiseFrontFace?"front":"back":"none"}get culling(){return!!(this.data&1<<u)}set culling(t){!!(this.data&1<<u)!==t&&(this.data^=1<<u)}get depthTest(){return!!(this.data&1<<h)}set depthTest(t){!!(this.data&1<<h)!==t&&(this.data^=1<<h)}get depthMask(){return!!(this.data&1<<f)}set depthMask(t){!!(this.data&1<<f)!==t&&(this.data^=1<<f)}get clockwiseFrontFace(){return!!(this.data&1<<c)}set clockwiseFrontFace(t){!!(this.data&1<<c)!==t&&(this.data^=1<<c)}get blendMode(){return this._blendMode}set blendMode(t){this.blend=t!=="none",this._blendMode=t,this._blendModeId=B[t]||0}get polygonOffset(){return this._polygonOffset}set polygonOffset(t){this.offsets=!!t,this._polygonOffset=t}toString(){return"[pixi.js/core:State blendMode=".concat(this.blendMode," clockwiseFrontFace=").concat(this.clockwiseFrontFace," culling=").concat(this.culling," depthMask=").concat(this.depthMask," polygonOffset=").concat(this.polygonOffset,"]")}static for2d(){const t=new S;return t.depthTest=!1,t.blend=!0,t}};g.default2d=g.for2d();let C=g;const P=class p extends v{constructor(t){t=o(o({},p.defaultOptions),t),super(t),this.enabled=!0,this._state=C.for2d(),this.blendMode=t.blendMode,this.padding=t.padding,typeof t.antialias=="boolean"?this.antialias=t.antialias?"on":"off":this.antialias=t.antialias,this.resolution=t.resolution,this.blendRequired=t.blendRequired,this.clipToViewport=t.clipToViewport,this.addResource("uTexture",0,1)}apply(t,e,i,a){t.applyFilter(this,e,i,a)}get blendMode(){return this._state.blendMode}set blendMode(t){this._state.blendMode=t}static from(t){const x=t,{gpu:e,gl:i}=x,a=T(x,["gpu","gl"]);let b,M;return e&&(b=O.from(e)),i&&(M=R.from(i)),new p(o({gpuProgram:b,glProgram:M},a))}};P.defaultOptions={blendMode:"normal",resolution:1,padding:0,antialias:"off",blendRequired:!1,clipToViewport:!0};let I=P;const m={name:"local-uniform-bit",vertex:{header:"\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "}},L=n(o({},m),{vertex:n(o({},m.vertex),{header:m.vertex.header.replace("group(1)","group(2)")})}),N={name:"local-uniform-bit",vertex:{header:"\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "}};class ${constructor(){this.batcherName="default",this.topology="triangle-list",this.attributeSize=4,this.indexSize=6,this.packAsQuad=!0,this.roundPixels=0,this._attributeStart=0,this._batcher=null,this._batch=null}get blendMode(){return this.renderable.groupBlendMode}get color(){return this.renderable.groupColorAlpha}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.bounds=null}destroy(){}}function D(s,t,e){const i=(s>>24&255)/255;t[e++]=(s&255)/255*i,t[e++]=(s>>8&255)/255*i,t[e++]=(s>>16&255)/255*i,t[e++]=i}export{$ as B,I as F,C as S,m as a,N as b,D as c,L as l};
